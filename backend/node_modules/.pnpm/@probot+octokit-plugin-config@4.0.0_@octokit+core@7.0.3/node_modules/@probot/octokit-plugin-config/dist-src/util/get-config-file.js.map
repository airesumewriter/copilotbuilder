{
  "version": 3,
  "sources": ["../../../src/util/get-config-file.ts"],
  "sourcesContent": ["import type { Octokit } from \"@octokit/core\";\nimport yaml from \"js-yaml\";\n\nimport type { Configuration, ConfigFile } from \"../types.js\";\n\ntype Options = {\n  owner: string;\n  repo: string;\n  path: string;\n  ref?: string | undefined;\n};\n\nconst SUPPORTED_FILE_EXTENSIONS = [\"json\", \"yml\", \"yaml\"];\n\n/**\n * Load configuration from a given repository and path.\n *\n * @param octokit Octokit instance\n * @param options\n */\nexport async function getConfigFile(\n  octokit: Octokit,\n  { owner, repo, path, ref }: Options,\n): Promise<ConfigFile> {\n  const fileExtension = (path.split(\".\").pop() as string).toLowerCase();\n\n  if (!SUPPORTED_FILE_EXTENSIONS.includes(fileExtension)) {\n    throw new Error(\n      `[@probot/octokit-plugin-config] .${fileExtension} extension is not support for configuration (path: \"${path}\")`,\n    );\n  }\n\n  // https://docs.github.com/en/rest/reference/repos#get-repository-content\n  const endpoint = {\n    method: \"GET\",\n    url: \"/repos/{owner}/{repo}/contents/{path}\",\n    owner,\n    repo,\n    path,\n    mediaType: {\n      format: \"raw\",\n    },\n    // this can be just `ref` once https://github.com/octokit/endpoint.js/issues/206 is resolved\n    ...(ref ? { ref } : {}),\n  };\n  const { url } = octokit.request.endpoint(endpoint);\n  const emptyConfigResult = {\n    owner,\n    repo,\n    path,\n    url,\n    config: null,\n  };\n\n  try {\n    const { data, headers } = await octokit.request(endpoint);\n\n    // If path is a submodule, or a folder, then a JSON string is returned with\n    // the \"Content-Type\" header set to \"application/json; charset=utf-8\".\n    //\n    // - https://docs.github.com/en/rest/reference/repos#if-the-content-is-a-submodule\n    // - https://docs.github.com/en/rest/reference/repos#if-the-content-is-a-directory\n    //\n    // symlinks just return the content of the linked file when requesting the raw formt,\n    // so we are fine\n    if (headers[\"content-type\"] === \"application/json; charset=utf-8\") {\n      throw new Error(\n        `[@probot/octokit-plugin-config] ${url} exists, but is either a directory or a submodule. Ignoring.`,\n      );\n    }\n\n    if (fileExtension === \"json\") {\n      if (typeof data === \"string\") {\n        throw new Error(\n          `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (invalid JSON)`,\n        );\n      }\n\n      return {\n        ...emptyConfigResult,\n        config: data,\n      };\n    }\n\n    const config = (yaml.load(data) || {}) as unknown as Configuration;\n\n    if (typeof config === \"string\") {\n      throw new Error(\n        `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (YAML is not an object)`,\n      );\n    }\n\n    return {\n      ...emptyConfigResult,\n      config,\n    };\n  } catch (error: any) {\n    if (error.status === 404) {\n      return emptyConfigResult;\n    }\n\n    if (error.name === \"YAMLException\") {\n      const reason = /unknown tag/.test(error.message)\n        ? \"unsafe YAML\"\n        : \"invalid YAML\";\n\n      throw new Error(\n        `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (${reason})`,\n      );\n    }\n\n    throw error;\n  }\n}\n"],
  "mappings": "AACA,OAAO,UAAU;AAWjB,MAAM,4BAA4B,CAAC,QAAQ,OAAO,MAAM;AAQxD,eAAsB,cACpB,SACA,EAAE,OAAO,MAAM,MAAM,IAAI,GACJ;AACrB,QAAM,gBAAiB,KAAK,MAAM,GAAG,EAAE,IAAI,EAAa,YAAY;AAEpE,MAAI,CAAC,0BAA0B,SAAS,aAAa,GAAG;AACtD,UAAM,IAAI;AAAA,MACR,oCAAoC,aAAa,uDAAuD,IAAI;AAAA,IAC9G;AAAA,EACF;AAGA,QAAM,WAAW;AAAA,IACf,QAAQ;AAAA,IACR,KAAK;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,MACT,QAAQ;AAAA,IACV;AAAA;AAAA,IAEA,GAAI,MAAM,EAAE,IAAI,IAAI,CAAC;AAAA,EACvB;AACA,QAAM,EAAE,IAAI,IAAI,QAAQ,QAAQ,SAAS,QAAQ;AACjD,QAAM,oBAAoB;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,EACV;AAEA,MAAI;AACF,UAAM,EAAE,MAAM,QAAQ,IAAI,MAAM,QAAQ,QAAQ,QAAQ;AAUxD,QAAI,QAAQ,cAAc,MAAM,mCAAmC;AACjE,YAAM,IAAI;AAAA,QACR,mCAAmC,GAAG;AAAA,MACxC;AAAA,IACF;AAEA,QAAI,kBAAkB,QAAQ;AAC5B,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI;AAAA,UACR,0EAA0E,GAAG;AAAA,QAC/E;AAAA,MACF;AAEA,aAAO;AAAA,QACL,GAAG;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAEA,UAAM,SAAU,KAAK,KAAK,IAAI,KAAK,CAAC;AAEpC,QAAI,OAAO,WAAW,UAAU;AAC9B,YAAM,IAAI;AAAA,QACR,0EAA0E,GAAG;AAAA,MAC/E;AAAA,IACF;AAEA,WAAO;AAAA,MACL,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF,SAAS,OAAY;AACnB,QAAI,MAAM,WAAW,KAAK;AACxB,aAAO;AAAA,IACT;AAEA,QAAI,MAAM,SAAS,iBAAiB;AAClC,YAAM,SAAS,cAAc,KAAK,MAAM,OAAO,IAC3C,gBACA;AAEJ,YAAM,IAAI;AAAA,QACR,0EAA0E,GAAG,KAAK,MAAM;AAAA,MAC1F;AAAA,IACF;AAEA,UAAM;AAAA,EACR;AACF;",
  "names": []
}
