{
  "version": 3,
  "sources": ["../../../src/util/extends-to-get-content-params.ts"],
  "sourcesContent": ["type Options = {\n  owner: string;\n  path: string;\n  url: string;\n  extendsValue: string;\n};\n\nconst EXTENDS_REGEX = new RegExp(\n  \"^\" +\n    \"(?:([a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38})/)?\" + // org\n    \"([-_.\\\\w\\\\d]+)\" + // project\n    \"(?::([-_./\\\\w\\\\d]+\\\\.ya?ml))?\" + // filename\n    \"$\",\n  \"i\",\n);\n\n/**\n * Computes parameters to retrieve the configuration file specified in _extends\n *\n * Base can either be the name of a repository in the same organization or\n * a full slug \"organization/repo\".\n *\n * @param options\n * @return The params needed to retrieve a configuration file\n */\nexport function extendsToGetContentParams({\n  owner,\n  path,\n  url,\n  extendsValue,\n}: Options) {\n  if (typeof extendsValue !== \"string\") {\n    throw new Error(\n      `[@probot/octokit-plugin-config] Invalid value ${JSON.stringify(\n        extendsValue,\n      )} for _extends in ${url}`,\n    );\n  }\n\n  const match = extendsValue.match(EXTENDS_REGEX);\n\n  if (match === null) {\n    throw new Error(\n      `[@probot/octokit-plugin-config] Invalid value \"${extendsValue}\" for _extends in ${url}`,\n    );\n  }\n\n  return {\n    owner: match[1] || owner,\n    repo: match[2],\n    path: match[3] || path,\n  };\n}\n"],
  "mappings": "AAOA,MAAM,gBAAgB,IAAI;AAAA,EACxB;AAAA,EAKA;AACF;AAWO,SAAS,0BAA0B;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAY;AACV,MAAI,OAAO,iBAAiB,UAAU;AACpC,UAAM,IAAI;AAAA,MACR,iDAAiD,KAAK;AAAA,QACpD;AAAA,MACF,CAAC,oBAAoB,GAAG;AAAA,IAC1B;AAAA,EACF;AAEA,QAAM,QAAQ,aAAa,MAAM,aAAa;AAE9C,MAAI,UAAU,MAAM;AAClB,UAAM,IAAI;AAAA,MACR,kDAAkD,YAAY,qBAAqB,GAAG;AAAA,IACxF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,OAAO,MAAM,CAAC,KAAK;AAAA,IACnB,MAAM,MAAM,CAAC;AAAA,IACb,MAAM,MAAM,CAAC,KAAK;AAAA,EACpB;AACF;",
  "names": []
}
